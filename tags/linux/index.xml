<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Yang Zhou</title>
    <link>http://halochou.github.io/tags/linux/</link>
    <description>Recent content in Linux on Yang Zhou</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Jun 2014 13:25:00 +0000</lastBuildDate>
    
	<atom:link href="http://halochou.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vagrant Overview</title>
      <link>http://halochou.github.io/posts/2014-06-18-vagrant-overview/</link>
      <pubDate>Wed, 18 Jun 2014 13:25:00 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-06-18-vagrant-overview/</guid>
      <description>Vagrant is a layer above virtual machine manager to automate VM operation. It use seed file Vagrantfile and image file Box to abstact VM&amp;rsquo;s information.
###Installation Vagrant need VirtualBox as backend engine(Provider).
VMware is also available but both VMware and provider plugin need be purchased.
Docker is also available as provider but docker itself runs in VM on OSX. Try on PC later.
###Init
$ vagrant init This will generate a init Vagrantfile for later customize.</description>
    </item>
    
    <item>
      <title>Two interesting linux command.</title>
      <link>http://halochou.github.io/posts/2014-06-12-two-linux-cmd/</link>
      <pubDate>Thu, 12 Jun 2014 23:45:00 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-06-12-two-linux-cmd/</guid>
      <description>Get two interesting linux command from this article.
 strings
NAME strings - find the printable strings in a object, or other binary, file SYNOPSIS strings [ - ] [ -a ] [ -o ] [ -t format ] [ -number ] [ -n number ] [--] [file ...] DESCRIPTION Strings looks for ASCII strings in a binary file or standard input. Strings is useful for identifying random object files and many other things.</description>
    </item>
    
    <item>
      <title>Docker Quick Tour (con.)</title>
      <link>http://halochou.github.io/posts/2014-06-12-docker-startup-con/</link>
      <pubDate>Thu, 12 Jun 2014 22:40:00 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-06-12-docker-startup-con/</guid>
      <description>##Usage(con.)
 Port mapping can be configured while docker run
$ sudo docker run -d -p 5000:5000 training/webapp python app.py Or be configured in Dockerfile
# Dockerfile EXPOSE 5901 Mount a Host Directory as a Data Volume
$ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py  ##Dockerfile An example dockerfile to dockerize a node.js application.
# Specific docker server version # DOCKER-VERSION 0.3.4 # Base image, usually retrieve from docker hub.</description>
    </item>
    
    <item>
      <title>Docker Quick Tour</title>
      <link>http://halochou.github.io/posts/2014-06-10-docker-startup/</link>
      <pubDate>Tue, 10 Jun 2014 21:00:00 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-06-10-docker-startup/</guid>
      <description>This is a brief record about my one-day trail on Docker.
 Docker is an open platform for developing, shipping, and running applications. Docker is designed to deliver your applications faster. With Docker you can separate your applications from your infrastructure AND treat your infrastructure like a managed application. Docker helps you ship code faster, test faster, deploy faster, and shorten the cycle between writing code and running code.
 ##Architecture</description>
    </item>
    
    <item>
      <title>Share VPN connection in Ubuntu</title>
      <link>http://halochou.github.io/posts/2014-02-24-share-vpn/</link>
      <pubDate>Mon, 24 Feb 2014 14:00:00 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-02-24-share-vpn/</guid>
      <description>Background  Company&amp;rsquo;s VPN client doesn&amp;rsquo;t support Mac OSX. Other VPN offered is slow. To use VPN, I set up a Ubuntu virtual machine in VMWare. Ubuntu uses VPN access company intranet and acts as a PPTP VPN server. Mac OSX connected to Ubuntu to access the intranet.  Environment  Ubuntu 13.04 Server eth0 inet addr:192.168.1.149 Bcast:192.168.1.255 Mask:255.255.255.0 #WAN, Bridged network in VMWare. tun0 inet addr:9.125.1.86 P-t-P:9.125.1.86 Mask:255.255.255.255 #Company VPN Tunnel ppp0 inet addr:192.</description>
    </item>
    
    <item>
      <title>Linux/Unix Learn Note</title>
      <link>http://halochou.github.io/posts/2014-01-13-cli-note/</link>
      <pubDate>Mon, 13 Jan 2014 15:22:00 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-01-13-cli-note/</guid>
      <description>This is a note which recorded *nix cli command I learnt. It will be updated continuously.
#Linux
##Process
###lsof
Get which file was opened by pid.
lsof -p pid Get which process opened this file.
lsof /var/run/sendmail.pid  Get file already been deleted but still held in /proc
lsof | grep deleted cat /proc/pid/fd/dddd &amp;gt; /tmp/sample Get process using port 80
lsof -i :80 Get process communicating with 192.168.1.10
lsof -i @192.</description>
    </item>
    
    <item>
      <title>Linux and me</title>
      <link>http://halochou.github.io/posts/2014-01-08-linux-and-me/</link>
      <pubDate>Wed, 08 Jan 2014 12:43:45 +0000</pubDate>
      
      <guid>http://halochou.github.io/posts/2014-01-08-linux-and-me/</guid>
      <description>没记错的话，大约就是2000年第一次接触Linux，当时看到杂志上说Linux能在很古老的硬件上运行，而且Titanic就是用这东西渲染的。
是的，这就是当时我对Linux的全部了解。 于是就冲到盗版盘市场买了张RedHat 6.2（不是现在的RHEL 6.2，那会RedHat还没分出Fedora和RHEL呢）。回来安装就受阻了，什么是Mount Point,完全不懂啊，当时也没有网络，只能在书店一本一本找。等终于成功装完，才发现这是个和Windows完全不同的世界，束手束脚，什么都不会做。第一次接触Linux就这样被彻底吓到了，当晚装回Windows ME，宣告迁移失败。
不过实践了就有益无害，这一步真是为之后接触Linux开了个好头。
高中的时候喜欢跑到邮局书店看免费杂志，从《电脑爱好者》（感谢CFAN启蒙之恩）里看到Ubuntu官网的光盘免费派送活动，尝试这申请了一个，不料真的邮寄来了。试用一下，如同进入一个广阔的新天地，Gnome+Compiz简直太炫目了。有人评论Ubuntu在Linux普及上的贡献是巨大的，确实不错。如果当时用的是Arch，估计我就又果断撤退了。
初用Ubuntu，最大的不适应就是常用软件，图形界面下没几个靠谱的（其实现在也是…），Openoffice更是完全闹着玩的，根本没办法代替M$，而且家里的台式机也不是我一个人用，还要照顾父母的工作，折腾幅度必须尽量小，结果就是多次尝试迁移主系统到Ubuntu都失败了。
我一直认为，想全面了解一个事物，与之朝夕相伴是最好的方法。 学习Linux，双系统永远都不能传授什么知识，只有彻底抛弃Windows才行。 这一目标终于在上大学后有了自己的电脑后实现了。
经历了多少次 努力用Linux&amp;mdash;想念Windows&amp;mdash;迁移失败&amp;mdash;回退 这种循环已经记不得了，总之是一个漫长的过程。人总会偏爱自己熟悉的事物，起初用Linux时，总会对其与Windows不同的设计耿耿于怀，觉得不一样就是不合理，之后越来越想念熟悉的Windows，再之后重装回去……我相信很多开源爱好者都是这么一步一步走过来的。如果小时候第一次用电脑就用Linux该多好，我相信他们也一定这么想。
还有一个重要因素就是Linux的图形界面确实不够成熟，对新手还不够友好。 图形界面不好用，自然就发掘一下命令行的世界。记得一个朋友初用Ubuntu的时候抱怨过，Synaptic很好用，为什么网上的教程都用apt-get，当时我也无法解答他的问题，现在看来，这个问题恐怕很难解答，除了效率、自由度之类的原因外，其他的因素恐怕只可意会不可言传。
熟悉了命令行就能更快的发现Linux的优势。除了一些商业软件找不到合适的Linux替代品外，其他几乎满满的都是优点。觉得好用&amp;mdash;渴望多了解&amp;mdash;越发觉得好用，良性循环恐怕就是这样建立的吧。这期间有两件事我觉得对自己影响颇大，一是Archlinux，一是《Unix编程艺术》。
第一次接触Archlinux，觉得这东西太反人类了，这恐怕正式当时认识太浅薄的表现。 第二次接触则是众多次重装系统中的一次尝试，找着官网Guide一步一步安装下去，发现这个小巧的发行版这急的如此精致，而且因为需要手工解包，安装程序不再是一个神秘的黑盒，对Linux的认识被彻底刷新。我一直强烈反对计算机专业的朋友使用Windows也是这个原因，一个根本无法看清内部细节的系统，苦心钻研怎么为他编程又有什么用。
一次大学的图书馆无意间借到《Unix编程艺术》。当时正在做毕业设计的程序&amp;ndash;一个简单的UDP发包器，使用Python+wxWidget实现，之前只学习过编程语言，完全没接触过程序设计理论，更不懂解耦。也许是一直使用Linux，潜移默化的暗示下，总觉得自己的程序看起来不自然，修改程序时总有推倒重构的冲动。看了《Unix编程艺术》，理解了KISS原则，豁然开朗，之前觉得*nix的各种优势得到了系统的解释。
说了很多力挺Linux的言论，但缺点也不能不说。开源是件好事，但开发者的动力从何而来呢，资金从何而来呢，无非是开发者对代码的热爱和商业公司对社区的资助。无利不起早啊，商业公司资助大型项目一定是因为项目对自身商用有利，个人桌面应用则不比商用，没有直接利益，也就少有人出资，仅凭开发者一枪热情自然只能点到为止，能用就行。
我在2013年底购入了人生的第一台Mac，之前尝试过黑苹果，但是稳定性太差，根本无法实用。现在用上OSX，感觉就像是回家，这才是真正意义上的产品。这是最先进的操作系统，没有之一。
杂七杂八写了不少，就此打住吧。</description>
    </item>
    
  </channel>
</rss>